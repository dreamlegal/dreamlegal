generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         String   @id @default(cuid())
  userId     String
  username   String   @default("anonymous")
  content    String
  parentId   String?
  poll       Json? // Stores {title, options: [{title, count}], isMultiselect: boolean}
  views      Int      @default(0)
  upvotes    String[] // Array of userIds who upvoted
  downvotes  String[] // Array of userIds who downvoted
  categories String[]
  replyIds   String[] // Array of postIds that are replies to this post
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  emailVerified DateTime?
  image         String?
  password      String?
  updatedAt     DateTime        @updatedAt
  type          String          @default("user")
  skip          Boolean?        @default(false)
  accounts      Account[]
  Authenticator Authenticator[]
  Notification  Notification[]
  Product       Product[]
  Review        Review[]
  SaveProduct   SaveProduct[]
  sessions      Session[]
  companyInfo   companyInfo[]
  userAccount   userAccount[]
  Post          Post[]
  bookmarkPost  String[]
  productClaims ProductClaim[]
}

model userAccount {
  id             String  @id @default(cuid())
  userId         String
  Contact        String?
  Location       String?
  Address        String?
  Designation    String?
  CompanyType    String?
  CompanyAddress String?
  CompanyEmail   String?
  OrgType        String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  PrimaryLanguage String[]
  Industry        String[]
  PracticeArea    String[]
  WorkType        String[]
  Goals           String[]
  ExistingTools   String[]
  TeamSize        String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model companyInfo {
  id                        String    @id @default(cuid())
  userId                    String
  companyName               String?
  website                   String?
  yearFounded               String?
  headQuaters               String?
  NameOfFounders            String?
  contact                   String?
  founderVision             String?
  regionServed              String?
  TeamSize                  String?
  Awards                    String?
  PointOfContactName        String?
  PointOfContactPhone       String?
  PointOfContactDesignation String?
  overview                  String?
  Product                   Product[]
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                      String        @id @default(cuid())
  userId                  String?
  companyId               String?
  name                    String
  logoUrl                 String
  active                  String        @default("draft")
  category                String[]
  deployement             String[]
  mobileAvailable         String?
  focusCountries          String[]
  avgTimeAdoption         String?
  languages               String[]
  securityCertificate     String?
  integration             String[]
  description             String?
  usp                     String?
  upcomingUpdates         String?
  painPointAddressed      String?
  userCategory            String[]
  industry                String[]
  industryPercentage      String[]
  practiceAreas           String[]
  freeTrial               String?
  timePeriod              String?
  freeVersion             String?
  contractPeriod          String?
  nameofPlan              String[]
  validity                String[]
  price                   String[]
  pricingParams           String[]
  Demo                    String[]
  DemoNote                String?
  support                 String[]
  supportNote             String?
  training                String[]
  trainingNote            String?
  storage                 String[]
  storageNote             String?
  fileSize                String[]
  fileSizeNote            String?
  maintenance             String?
  maintenanceNote         String?
  reqForChange            String?
  reqForChangeNote        String?
  trainingReq             String?
  trainingReqNote         String?
  dataMigration           String?
  dataMigrationNote       String?
  Images                  String[]
  videoUrl                String?
  attachments             String[]
  youtubeUrl              String?
  linkedinUrl             String?
  twitterUrl              String?
  instagramUrl            String?
  websiteUrl              String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  practiceAreasPercentage String[]
  userCategoryPercentage  String[]
  teamSize                String[]
  teamsizePercentage      String[]
  processLifecycle        Json?
  features                Json?
  pricingModel            String[]
  featured                Boolean       @default(false)
  slug                    String        @unique
  company                 companyInfo?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                    User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Review                  Review[]
  SaveProduct             SaveProduct[] @relation("ProductToSaveProduct")
  isVendorVerified        Boolean       @default(true)
  completionRate          Int           @default(0)
  CompanyName             String?       @default("abc")
  Headquarters            String?       @default("India")
  FoundersNames           String[]      @default([])
  ByAdminYearFounded      String?
  ByAdminAwards           String?
  ByAdminTeamSize         String?
  ByAdminEmail            String?
  ByAdminPhone            String?
  ByAdminWebsite          String?
  claims     ProductClaim[]  // Add this line
  region                  String?
}

model Review {
  id               String   @id @default(cuid())
  userId           String
  otherProducts    String
  oftenUsed        String
  overallExperienc String
  bestThing        String
  worstThing       String
  reference        String
  attachement      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  productId        String
  involvement      String[]
  WhyBought        String[]
  GoalBehind       String[]
  easeOfLearning   Int
  integration      Int
  support          Int
  roi              Int
  functionality    Json
  processStep      Json
  recommend        Int
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id           String   @id @default(cuid())
  productId    String   @unique
  shares       Int?
  followers    Int?
  views        Int?
  loginsViews  Int?
  leads        Int?
  desktopViews Int?
  mobileViews  Int?
  tabletViews  Int?
  country      Json?
  createdAt    DateTime @default(now())
  month        String?
}

model ClickCount {
  id        Int    @id @default(autoincrement())
  productId String @unique
  feature   Json   @default("[]")
}

model SaveProduct {
  id        String    @id @default(cuid())
  userId    String
  productId String[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product   Product[] @relation("ProductToSaveProduct")
}

model Admins {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  user     String?
}

model Interest {
  id                  String   @id @default(cuid())
  userId              String
  productId           String
  companyId           String
  companyTypeFromUser String
  createdAt           DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  userId    String? // Nullable foreign key for User
  type      String?
  read      Boolean  @default(false) // Indicates whether the notification has been read
  user      User?    @relation(fields: [userId], references: [id])
}

model Booking {
  id               String   @id @default(cuid())
  productId        String
  vendorId         String
  ProductName      String
  VendorName       String
  contactEmail     String
  designation      String
  name             String
  organisationName String
  organisationType String
  requirements     String
  scheduleDemo     Boolean
  teamSize         String
  bookingTime      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
}

model ProductView {
  id          Int      @id @default(autoincrement())
  productId   String // Change from Int to String if necessary
  userOrgType String? // Nullable for uncategorized users
  createdAt   DateTime @default(now()) // Timestamp of the view
  country     String?
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  productId   String // Change from Int to String if necessary
  userOrgType String? // Nullable for uncategorized users
  createdAt   DateTime @default(now()) // Timestamp of the bookmark
  country     String?
}

model Share {
  id          Int      @id @default(autoincrement())
  productId   String // Change from Int to String if necessary
  country     String?
  userOrgType String? // Nullable for uncategorized users
  createdAt   DateTime @default(now()) // Timestamp of the share
}

model Features {
  id           Int      @id @default(autoincrement())
  productID    String
  country      String? // Optional country field
  userOrgType  String?
  time         DateTime @default(now())
  categoryData Json // To store category names and their open counts

  @@map("features") // The table is now called "features"
}

model RfpForm {
  id            String  @id @default(uuid())
  userID        String? // User ID
  userOrgType   String? // Organization Type
  userTeamSize  String? // Team Size
  customisation String? // Customization requests

  urgency  Json? // Urgency details stored as a JSON object
  budget   Json? // Budget details stored as a JSON object
  features Json? // Features stored as a JSON object
  vendors  Json? // Vendors stored as a JSON object

  createdAt DateTime @default(now()) // Timestamp for when the RFP form is created
  updatedAt DateTime @updatedAt // Timestamp for last update
}

model workFlowProcess {
  id                 String  @id @default(uuid())
  userID             String? // User ID
  userOrgType        String
  userTeamSize       String
  categoryOfWorkflow String
  teamRoles          Json
  toolsUsed          Json
  workFlowSteps      Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordReset {
  id              String   @id @default(cuid())
  userId          String // Foreign key to User
  token           String // Reset token
  tokenExpiration DateTime // Token expiration time
  createdAt       DateTime @default(now()) // When the reset request was created

  @@unique([token]) // Ensure token is unique
}

model workflowResponse {
  id                 String   @id @default(cuid())
  formId             String?  @unique
  userId             String?
  name               String?
  categoryOfAnalysis String?
  data               Json?
  isSaved            Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model OtpVerification {
  email     String   @id
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VendorCredits {
  id                String   @id @default(uuid())
  vendorId          String
  proposalCredits   Int      @default(10)
  validationCredits Int      @default(10)
  lastRenewalDate   DateTime @default(now())
  nextRenewalDate   DateTime

  @@index([vendorId])
}

model PartnersLeads {
  id        String   @id @default(uuid())
  name      String?
  category  String?
  email     String?
  createdAt DateTime @default(now())
}

model PotentialLeadDetailed {
  id           String   @id @default(uuid())
  role         String?
  email        String?
  organisation String?
  createdAt    DateTime @default(now())
}

model ContentEmailLists {
  id          String   @id @default(uuid())
  email       String?
  contentType String?
  contentName String?
  createdAt   DateTime @default(now())
}

model DemoLeads {
  id        String   @id @default(uuid())
  email     String?
  createdAt DateTime @default(now())
}

model PotentialLead {
  id         String   @id @default(uuid())
  email      String?
  typeOfLead String?
  createdAt  DateTime @default(now())
}

model VendorLeads {
  id          String   @id @default(uuid())
  companyName String?
  email       String?
  message     String?
  createdAt   DateTime @default(now())
}

model AiProposal {
  id         String         @id @default(cuid())
  vendorId   String
  name       String? // Optional proposal name
  formData   Json // Initial form data
  aiResponse Json? // AI generated response
  versions   Json? // Array of versions with {name, content, createdAt}
  status     ProposalStatus @default(UNSAVED)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([vendorId])
}

enum ProposalStatus {
  UNSAVED
  SAVED
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  bannerImage String?
  content     String    @db.Text
  category    String[]
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  refLinks    RefLink[]
  tocItems    TocItem[]

  htmlTitle       String? // For <title> tag
  metaDescription String? @db.Text // For meta description
  ogTitle         String? // For Open Graph title
  ogUrl           String? // For Open Graph URL
  ogImage         String? // For Open Graph image
  slug            String? @unique
}

model RefLink {
  id     String @id @default(cuid())
  title  String
  url    String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
}

model TocItem {
  id      String @id @default(cuid())
  level   Int
  content String
  slug    String
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String
}
model CommonLead {
  id            String   @id @default(uuid())
  email         String   @unique
  organization  String
  designation   String
  message       String
  createdAt     DateTime @default(now())
}


model ProductClaim {
  id         String   @id @default(cuid())
  productId  String
  vendorId   String   // The vendor requesting to claim the product
  createdAt  DateTime @default(now())
  
  // Relations
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  vendor     User     @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([productId, vendorId]) // Prevent duplicate claims
}